package chunk_test

import (
	"testing"
	"time"

	"github.com/graugans/go-ovp8xx/pkg/chunk"
	"github.com/stretchr/testify/assert"
)

func TestChunkType(t *testing.T) {
	c := chunk.New(chunk.RADIAL_DISTANCE_NOISE)
	assert.Equal(t,
		chunk.RADIAL_DISTANCE_NOISE,
		c.Type(),
		"There is a chunk type missmatch detected",
	)
}

func TestChunkParse(t *testing.T) {
	c := chunk.ChunkData{}
	assert.Error(t,
		c.Parse([]byte{}),
		"An error is expected when sending an empty byte slice",
	)
	assert.NoError(t,
		c.Parse([]byte{
			0x69, 0x00, 0x00, 0x00, /* CHUNK_TYPE */
			0x30, 0x00, 0x00, 0x00, /* CHUNK_SIZE */
			0x30, 0x00, 0x00, 0x00, /* HEADER_SIZE */
			0x02, 0x00, 0x00, 0x00, /* HEADER_VERSION */
			0x00, 0x00, 0x00, 0x00, /* IMAGE_WIDTH */
			0x00, 0x00, 0x00, 0x00, /* IMAGE_HEIGTH */
			0x00, 0x00, 0x00, 0x00, /* DATA_FORMAT */
			0x00, 0x01, 0x00, 0x00, /* TIME_STAMP */
			0x00, 0x01, 0x00, 0x00, /* FRAME_COUNT */
			0x00, 0x01, 0x00, 0x00, /* STATUS_CODE */
			0x00, 0x01, 0x00, 0x00, /* TIME_STAMP_SEC */
			0x00, 0x01, 0x00, 0x00, /* TIME_STAMP_NSEC */
		}),
		"A successful parse expected",
	)
	assert.NoError(t,
		c.Parse([]byte{
			0x69, 0x00, 0x00, 0x00, /* CHUNK_TYPE */
			0x30, 0x00, 0x00, 0x00, /* CHUNK_SIZE */
			0x30, 0x00, 0x00, 0x00, /* HEADER_SIZE */
			0x02, 0x00, 0x00, 0x00, /* HEADER_VERSION */
			0x00, 0x00, 0x00, 0x00, /* IMAGE_WIDTH */
			0x00, 0x00, 0x00, 0x00, /* IMAGE_HEIGTH */
			0x00, 0x00, 0x00, 0x00, /* DATA_FORMAT */
			0x00, 0x01, 0x00, 0x00, /* TIME_STAMP */
			0x00, 0x01, 0x00, 0x00, /* FRAME_COUNT */
			0x00, 0x01, 0x00, 0x00, /* STATUS_CODE */
			0x00, 0x01, 0x00, 0x00, /* TIME_STAMP_SEC */
			0x00, 0x01, 0x00, 0x00, /* TIME_STAMP_NSEC */
		}),
		"A successful parse expected",
	)
	assert.Equal(t, chunk.RADIAL_DISTANCE_NOISE, c.Type(), "Type missmatch detected")
	assert.Equal(t,
		uint32(0x30),
		c.Size(),
		"Size missmatch detected",
	)
	assert.Error(t,
		c.Parse([]byte{
			0x69, 0x00, 0x00, 0x00, /* CHUNK_TYPE */
			0x30, 0x00, 0x00, 0x00, /* CHUNK_SIZE */
			0x30, 0x00, 0x00, 0x00, /* HEADER_SIZE */
			0x02, 0x00, 0x00, 0x00, /* HEADER_VERSION */
			0x01, 0x00, 0x00, 0x00, /* IMAGE_WIDTH */
			0x01, 0x00, 0x00, 0x00, /* IMAGE_HEIGTH */
			0x00, 0x00, 0x00, 0x00, /* DATA_FORMAT */
			0x00, 0x01, 0x00, 0x00, /* TIME_STAMP */
			0x00, 0x01, 0x00, 0x00, /* FRAME_COUNT */
			0x00, 0x01, 0x00, 0x00, /* STATUS_CODE */
			0x00, 0x01, 0x00, 0x00, /* TIME_STAMP_SEC */
			0x00, 0x01, 0x00, 0x00, /* TIME_STAMP_NSEC */
		}),
		"A error due to invalid width and height expected",
	)
	assert.Error(t,
		c.Parse([]byte{
			0x69, 0x00, 0x00, 0x00, /* CHUNK_TYPE */
			0x30, 0x00, 0x00, 0x00, /* CHUNK_SIZE */
			0x30, 0x00, 0x00, 0x00, /* HEADER_SIZE */
			0x02, 0x00, 0x00, 0x00, /* HEADER_VERSION */
			0x00, 0x00, 0x00, 0x00, /* IMAGE_WIDTH */
			0x00, 0x00, 0x00, 0x00, /* IMAGE_HEIGTH */
			0x00, 0x01, 0x00, 0x00, /* DATA_FORMAT */
			0x00, 0x01, 0x00, 0x00, /* TIME_STAMP */
			0x00, 0x01, 0x00, 0x00, /* FRAME_COUNT */
			0x00, 0x01, 0x00, 0x00, /* STATUS_CODE */
			0x00, 0x01, 0x00, 0x00, /* TIME_STAMP_SEC */
			0x00, 0x01, 0x00, 0x00, /* TIME_STAMP_NSEC */
		}),
		"A error due to an invalid pixelformat expected",
	)

	assert.NoError(t,
		c.Parse([]byte{
			0x69, 0x00, 0x00, 0x00, /* CHUNK_TYPE */
			0x30, 0x00, 0x00, 0x00, /* CHUNK_SIZE */
			0x30, 0x00, 0x00, 0x00, /* HEADER_SIZE */
			0x02, 0x00, 0x00, 0x00, /* HEADER_VERSION */
			0x00, 0x00, 0x00, 0x00, /* IMAGE_WIDTH */
			0x00, 0x00, 0x00, 0x00, /* IMAGE_HEIGTH */
			0x00, 0x00, 0x00, 0x00, /* DATA_FORMAT */
			0x00, 0x01, 0x00, 0x00, /* TIME_STAMP */
			0x00, 0x01, 0x00, 0x00, /* FRAME_COUNT */
			0x00, 0x00, 0x00, 0x00, /* STATUS_CODE */
			0x00, 0x01, 0x00, 0x00, /* TIME_STAMP_SEC */
			0x00, 0x01, 0x00, 0x00, /* TIME_STAMP_NSEC */
		}),
		"A successful parse expected",
	)
	assert.Equal(t, uint32(0x100), c.FrameCount(), "A framecount missmatch occurd")
	assert.Equal(t, uint32(0x00), c.Status(), "A status code missmatch occurd")
	assert.NoError(t,
		c.Parse([]byte{
			0x69, 0x00, 0x00, 0x00, /* CHUNK_TYPE */
			0x30, 0x00, 0x00, 0x00, /* CHUNK_SIZE */
			0x30, 0x00, 0x00, 0x00, /* HEADER_SIZE */
			0x02, 0x00, 0x00, 0x00, /* HEADER_VERSION */
			0x00, 0x00, 0x00, 0x00, /* IMAGE_WIDTH */
			0x00, 0x00, 0x00, 0x00, /* IMAGE_HEIGTH */
			0x00, 0x00, 0x00, 0x00, /* DATA_FORMAT */
			0x00, 0x00, 0x00, 0x00, /* TIME_STAMP */
			0x00, 0x00, 0x00, 0x00, /* FRAME_COUNT */
			0x00, 0x00, 0x00, 0x00, /* STATUS_CODE */
			0x00, 0x01, 0x00, 0x00, /* TIME_STAMP_SEC */
			0x01, 0x01, 0x00, 0x00, /* TIME_STAMP_NSEC */
		}),
		"A successful parse expected",
	)
	assert.NotEqual(t,
		time.Unix(0, 0),
		c.TimeStamp(),
		"A timestamp missmatch expected",
	)
	assert.Equal(t,
		time.Unix(int64(0x100), int64(0x101)),
		c.TimeStamp(),
		"A timestamp missmatch occurd",
	)
	assert.NoError(t,
		c.Parse([]byte{
			0x69, 0x00, 0x00, 0x00, /* CHUNK_TYPE */
			0x34, 0x00, 0x00, 0x00, /* CHUNK_SIZE */
			0x30, 0x00, 0x00, 0x00, /* HEADER_SIZE */
			0x02, 0x00, 0x00, 0x00, /* HEADER_VERSION */
			0x04, 0x00, 0x00, 0x00, /* IMAGE_WIDTH */
			0x01, 0x00, 0x00, 0x00, /* IMAGE_HEIGTH */
			0x00, 0x00, 0x00, 0x00, /* DATA_FORMAT */
			0x00, 0x00, 0x00, 0x00, /* TIME_STAMP */
			0x00, 0x00, 0x00, 0x00, /* FRAME_COUNT */
			0x00, 0x00, 0x00, 0x00, /* STATUS_CODE */
			0x00, 0x01, 0x00, 0x00, /* TIME_STAMP_SEC */
			0x01, 0x01, 0x00, 0x00, /* TIME_STAMP_NSEC */
			0xFF, 0xFF, 0xFF, 0xBB, /* DATA */
			0x69, 0x00, 0x00, 0x00, /* CHUNK_TYPE of second frame*/
		}),
		"A successful parse expected",
	)
	assert.Equal(t,
		4,
		len(c.Bytes()),
		"A data size missmatch occured",
	)
	assert.Equal(t,
		[]byte{0xFF, 0xFF, 0xFF, 0xBB},
		c.Bytes(),
		"A data size missmatch occured",
	)
}
